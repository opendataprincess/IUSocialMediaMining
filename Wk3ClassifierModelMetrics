from sklearn.linear_model import LinearRegression
import numpy as np
np.random.seed(3057)
heights = np.random.normal(113, 20, 1000)
noise = np.random.normal(0,5,1000)
weights = 25.39 + .34 * heights + noise
heights = heights.reshape(-1,1)
weights = weights.reshape(-1,1)
from sklearn.cross_validation import train_test_split
heights_train, heights_test, weights_train, weights_test=train_test_split(heights,weights, test_size=0.2)
heights_train.shape
heights_test.shape
lr = LinearRegression()

#creating classifer
lr.fit(heights_train,weights_train)

#predict outcome of dependent variable Y given independent variable X
weights_predicted= lr.predict(heights_test)
print(weights_predicted[:5])
print(weights_test[:5])
#this code uses metrics from Sci Kit in Python to predict how good the model is with r2
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(weights_test, weights_predicted)
MSE
np.sqrt(MSE)
from sklearn.metrics import r2_score
r2 = r2_score(weights_test, weights_predicted)
r2

from sklearn.neighbors import KNeighborsClassifier
from sklearn import datasets
iris = datasets.load_iris()
X = iris.data[:, :2]
y = iris.target

#Split the test size, we use a 33% test size since there are only 150 data points in this sample
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)
X_train.shape
X_test.shape
clf = KNeighborsClassifier(n_neighbors=5)
clf.fit(X_train, y_train)
y_predicted = clf.predict(X_test)
#Show the first five results
y_predicted[:5]
y_test[:5]
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_predicted)
accuracy
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, y_predicted)
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
precision = precision_score(y_test, y_predicted, average = None)
precision
recall = recall_score(y_test, y_predicted, average=None)
recall
np.mean(precision)
np.mean(recall)
precision_score(y_test, y_predicted, average = "macro")
precision_score(y_test, y_predicted, average = "weighted")
from sklearn.metrics import f1_score
f1_score(y_test, y_predicted, average = "macro")
f1_score(y_test, y_predicted, average = "weighted")
